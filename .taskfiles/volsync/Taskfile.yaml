---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

# This taskfile is used to manage certain VolSync tasks for a given application, limitations are described below.
#   1. Fluxtomization, HelmRelease, PVC, ReplicationSource all have the same name (e.g. plex)
#   2. ReplicationSource and ReplicationDestination are a Restic repository
#   3. Applications are deployed as either a Kubernetes Deployment or StatefulSet
#   4. Each application only has one PVC that is being replicated

x-vars: &vars
  APP: '{{.APP}}'
  CLAIM: '{{.CLAIM}}'
  CONTROLLER: '{{.CONTROLLER}}'
  JOB: '{{.JOB}}'
  NS: '{{.NS}}'
  PGID: '{{.PGID}}'
  PREVIOUS: '{{.PREVIOUS}}'
  PUID: '{{.PUID}}'

vars:
  VOLSYNC_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/volsync/resources'

tasks:

  state-*:
    desc: Suspend or Resume Volsync
    summary: |
      CLUSTER: Cluster to run command against (required)
      STATE: resume or suspend (required)
    cmds:
      - flux {{.STATE}} kustomization volsync
      - flux --namespace {{.NS}} {{.STATE}} helmrelease volsync
      - kubectl --namespace {{.NS}} scale deployment volsync --replicas {{if eq "suspend" .STATE}}0{{else}}1{{end}}
    vars:
      NS: '{{.NS | default "volsync-system"}}'
      STATE: '{{index .MATCH 0}}'
    env: *vars
    requires:
      vars: ['CLUSTER']

  list:
    desc: List snapshots for an application
    summary: |
      CLUSTER: Cluster to run command against (required)
      NS: Namespace the PVC is in (default: default)
      APP: Application to list snapshots for (required)
    cmds:
      - $GOPATH/bin/envsubst < <(cat {{.VOLSYNC_RESOURCES_DIR}}/list.tmpl.yaml) | kubectl apply -f -
      - bash {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=1m
      - kubectl --namespace {{.NS}} logs job/{{.JOB}} --container main
      - kubectl --namespace {{.NS}} delete job {{.JOB}}
    vars:
      NS: '{{.NS | default "default"}}'
      JOB: volsync-list-{{.APP}}
    env: *vars
    requires:
      vars: ['CLUSTER', 'APP']
    preconditions:
      - test -f $GOPATH/bin/envsubst
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/list.tmpl.yaml
    silent: true

  unlock:
    desc: Unlock a Restic repository for an application
    summary: |
      CLUSTER: Cluster to run command against (required)
      NS: Namespace the PVC is in (default: default)
      APP: Application to unlock (required)
    cmds:
      - $GOPATH/bin/envsubst < <(cat {{.VOLSYNC_RESOURCES_DIR}}/unlock.tmpl.yaml) | kubectl apply -f -
      - bash {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=1m
      - kubectl --namespace {{.NS}} logs job/{{.JOB}} --container minio
      - kubectl --namespace {{.NS}} logs job/{{.JOB}} --container r2
      - kubectl --namespace {{.NS}} delete job {{.JOB}}
    vars:
      NS: '{{.NS | default "default"}}'
      JOB: volsync-unlock-{{.APP}}
    env: *vars
    requires:
      vars: ['CLUSTER', 'APP']
    preconditions:
      - test -f $GOPATH/bin/envsubst
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/unlock.tmpl.yaml
    silent: true

  # To run backup jobs in parallel for all replicationsources:
  #   - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=4 -l bash -c 'task volsync:snapshot APP=$0 NS=$1'
  snapshot:
    desc: Snapshot a PVC for an application
    summary: |
      CLUSTER: Cluster to run command against (required)
      NS: Namespace the PVC is in (default: default)
      APP: Application to snapshot (required)
    cmds:
      - kubectl --namespace {{.NS}} patch replicationsources {{.APP}} --type merge -p '{"spec":{"trigger":{"manual":"{{.NOW}}"}}}'
      - bash {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=120m
    vars:
      NOW: '{{now | date "150405"}}'
      NS: '{{.NS | default "default"}}'
      JOB: volsync-src-{{.APP}}
      CONTROLLER:
        sh: '{{.VOLSYNC_RESOURCES_DIR}}/which-controller.sh {{.APP}} {{.NS}}'
    env: *vars
    requires:
      vars: ['CLUSTER', 'APP']
    preconditions:
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/which-controller.sh
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh
      - kubectl --namespace {{.NS}} get replicationsources {{.APP}}

  # To run restore jobs in parallel for all replicationdestinations:
  #    - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=4 -l bash -c 'task volsync:restore APP=$0 NS=$1'
  restore:
    desc: Restore a PVC for an application
    summary: |
      CLUSTER: Cluster to run command against (required)
      NS: Namespace the PVC is in (default: default)
      APP: Application to restore (required)
      PREVIOUS: Previous number of snapshots to restore (default: 2)
    cmds:
      - { task: .suspend, vars: *vars }
      - { task: .wipe, vars: *vars }
      - { task: .restore, vars: *vars }
      - { task: .resume, vars: *vars }
    vars:
      NS: '{{.NS | default "default"}}'
      PREVIOUS: '{{.PREVIOUS | default 2}}'
      CONTROLLER:
        sh: '{{.VOLSYNC_RESOURCES_DIR}}/which-controller.sh {{.APP}} {{.NS}}'
      CLAIM:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath="{.spec.sourcePVC}"
      PUID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath="{.spec.restic.moverSecurityContext.runAsUser}"
      PGID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath="{.spec.restic.moverSecurityContext.runAsGroup}"
    env: *vars
    requires:
      vars: ['CLUSTER', 'APP']
    preconditions:
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/which-controller.sh

  cleanup:
    desc: Delete volume populator PVCs in all namespaces
    summary: |
      CLUSTER: Cluster to run command against (required)
    cmds:
      - for: { var: DEST }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl delete pvc --namespace {{ $items._0 }} {{ $items._1 }}
      - for: { var: CACHE }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl delete pvc --namespace {{ $items._0 }} {{ $items._1 }}
      - for: { var: SNAPS }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl delete volumesnapshot --namespace {{ $items._0 }} {{ $items._1 }}
    vars:
      DEST:
        sh: kubectl get pvc --all-namespaces --no-headers | grep "dst-dest" | awk '{print $1 "/" $2}'
      CACHE:
        sh: kubectl get pvc --all-namespaces --no-headers | grep "dst-cache" | awk '{print $1 "/" $2}'
      SNAPS:
        sh: kubectl get volumesnapshot --all-namespaces --no-headers | grep "dst-dest" | awk '{print $1 "/" $2}'
    env: *vars
    requires:
      vars: ['CLUSTER']

  # Suspend the Flux ks and hr
  .suspend:
    internal: true
    cmds:
      - flux --namespace flux-system suspend kustomization {{.APP}}
      - flux --namespace {{.NS}} suspend helmrelease {{.APP}}
      - kubectl --namespace {{.NS}} scale {{.CONTROLLER}} --replicas 0
      - kubectl --namespace {{.NS}} wait pod --for delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=2m
    env: *vars

  # Wipe the PVC of all data
  .wipe:
    internal: true
    cmds:
      - $GOPATH/bin/envsubst < <(cat {{.VOLSYNC_RESOURCES_DIR}}/wipe.tmpl.yaml) | kubectl apply -f -
      - bash {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=120m
      - kubectl --namespace {{.NS}} logs job/{{.JOB}} --container main
      - kubectl --namespace {{.NS}} delete job {{.JOB}}
    vars:
      JOB: volsync-wipe-{{.APP}}
    env: *vars
    preconditions:
      - test -f $GOPATH/bin/envsubst
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/wipe.tmpl.yaml
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh

  # Create VolSync replicationdestination CR to restore data
  .restore:
    internal: true
    cmds:
      - $GOPATH/bin/envsubst < <(cat {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.tmpl.yaml) | kubectl apply -f -
      - bash {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh {{.JOB}} {{.NS}}
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for condition=complete --timeout=120m
      - kubectl --namespace {{.NS}} delete replicationdestination {{.JOB}}
    vars:
      JOB: volsync-dst-{{.APP}}
    env: *vars
    preconditions:
      - test -f $GOPATH/bin/envsubst
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.tmpl.yaml
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/wait-for-job.sh

  # Resume Flux ks and hr
  .resume:
    internal: true
    cmds:
      - flux --namespace {{.NS}} resume helmrelease {{.APP}}
      - flux --namespace flux-system resume kustomization {{.APP}}
    env: *vars
